// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var MutablePair$MyNewProject = require("./MutablePair.bs.js");

function type_intersection(t1, t2) {
  if (typeof t1 === "number" && t1 === 1) {
    return t2;
  }
  if (typeof t2 === "number") {
    if (t2 !== 1 && !Caml_obj.caml_equal(t1, t2)) {
      return /* T_Fail */2;
    } else {
      return t1;
    }
  } else if (Caml_obj.caml_equal(t1, t2)) {
    return t1;
  } else {
    return /* T_Fail */2;
  }
}

function ert_intersection(ert1, ert2) {
  return /* tuple */[
          type_intersection(ert1[0], ert2[0]),
          List.append(ert1[1], ert2[1])
        ];
}

function type_intersection_list(ts) {
  return List.fold_left(type_intersection, /* T_Any */1, ts);
}

function merge_examples_list(es) {
  return List.fold_left(List.append, /* [] */0, es);
}

function ert_intersection_list(erts) {
  return List.fold_left(ert_intersection, /* tuple */[
              /* T_Any */1,
              /* [] */0
            ], erts);
}

function type_of_value(value) {
  if (typeof value === "number") {
    return /* T_Fail */2;
  }
  switch (value.tag | 0) {
    case /* V_Bool */0 :
        return /* T_Bool */0;
    case /* V_Function */1 :
        return /* T_Function */[
                value[2][0][0],
                value[0][0]
              ];
    case /* V_Application */2 :
        var match = MutablePair$MyNewProject.fst(value[0]);
        if (typeof match === "number") {
          throw [
                Caml_builtin_exceptions.match_failure,
                /* tuple */[
                  "TypeTools.re",
                  28,
                  39
                ]
              ];
        }
        return match[1];
    case /* V_Hole */3 :
        return MutablePair$MyNewProject.fst(value[0]);
    
  }
}

function subtype(t1, t2) {
  return Caml_obj.caml_equal(type_intersection(t1, t2), t1);
}

function type_checks(value, type_) {
  return subtype(type_of_value(value), type_);
}

var merge_examples = List.append;

exports.type_intersection = type_intersection;
exports.merge_examples = merge_examples;
exports.ert_intersection = ert_intersection;
exports.type_intersection_list = type_intersection_list;
exports.merge_examples_list = merge_examples_list;
exports.ert_intersection_list = ert_intersection_list;
exports.type_of_value = type_of_value;
exports.subtype = subtype;
exports.type_checks = type_checks;
/* No side effect */
