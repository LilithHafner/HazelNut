// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");

function valToExp(v) {
  if (typeof v === "number") {
    return /* Unit */1;
  }
  switch (v.tag | 0) {
    case /* Vint */0 :
        return /* Int */Block.__(0, [v[0]]);
    case /* Vbool */1 :
        return /* Bool */Block.__(2, [v[0]]);
    case /* Vpair */2 :
        return /* Pair */Block.__(8, [
                  valToExp(v[0]),
                  valToExp(v[1])
                ]);
    
  }
}

function valToRes(v) {
  if (typeof v === "number") {
    return /* Runit */1;
  }
  switch (v.tag | 0) {
    case /* Vint */0 :
        return /* Rint */Block.__(0, [v[0]]);
    case /* Vbool */1 :
        return /* Rbool */Block.__(2, [v[0]]);
    case /* Vpair */2 :
        return /* Rpair */Block.__(7, [
                  valToRes(v[0]),
                  valToRes(v[1])
                ]);
    
  }
}

function exToExp(ex) {
  if (typeof ex === "number") {
    if (ex === /* Eunit */1) {
      return /* Unit */1;
    } else {
      return ;
    }
  }
  if (ex.tag !== /* Epair */2) {
    return ;
  }
  var match = exToExp(ex[0]);
  var match$1 = exToExp(ex[1]);
  if (match !== undefined && match$1 !== undefined) {
    return /* Pair */Block.__(8, [
              match,
              match$1
            ]);
  }
  
}

function resToVal(res) {
  if (typeof res === "number") {
    if (res === /* Runit */1) {
      return /* Vunit */0;
    } else {
      return ;
    }
  }
  switch (res.tag | 0) {
    case /* Rint */0 :
        return /* Vint */Block.__(0, [res[0]]);
    case /* Rbool */2 :
        return /* Vbool */Block.__(1, [res[0]]);
    case /* Rpair */7 :
        var match = resToVal(res[0]);
        var match$1 = resToVal(res[1]);
        if (match !== undefined && match$1 !== undefined) {
          return /* Vpair */Block.__(2, [
                    match,
                    match$1
                  ]);
        } else {
          return ;
        }
    default:
      return ;
  }
}

function castable(res) {
  return resToVal(res) !== undefined;
}

exports.valToExp = valToExp;
exports.valToRes = valToRes;
exports.exToExp = exToExp;
exports.resToVal = resToVal;
exports.castable = castable;
/* No side effect */
