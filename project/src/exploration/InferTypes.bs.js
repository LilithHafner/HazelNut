// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Tools$MyNewProject = require("../Tools.bs.js");
var TypeTools$MyNewProject = require("./TypeTools.bs.js");
var ListBasics$MyNewProject = require("./ListBasics.bs.js");

function infer_types(ert_exp, env) {
  var match = ert_exp[0];
  var t = match[0];
  var id = ert_exp[1];
  switch (id.tag | 0) {
    case /* E_Bool */0 :
        break;
    case /* E_Variable */1 :
        var id$1 = id[0];
        if (ListBasics$MyNewProject.all_predicate((function (param) {
                  var result = param[1];
                  if (Caml_obj.caml_equal(Tools$MyNewProject.lookup(id$1, param[0]), result)) {
                    return TypeTools$MyNewProject.type_checks(result, t);
                  } else {
                    return false;
                  }
                }), match[1])) {
          return Tools$MyNewProject.lookup(id$1, env);
        }
        break;
    default:
      return /* V_Fail */0;
  }
  if (typeof t !== "number") {
    return /* V_Fail */0;
  }
  if (t >= 2) {
    return /* V_Fail */0;
  }
  var value = ert_exp[1];
  if (value.tag) {
    return /* V_Fail */0;
  }
  var value$1 = value[0];
  if (ListBasics$MyNewProject.all_predicate((function (param) {
            return Caml_obj.caml_equal(/* V_Bool */Block.__(0, [value$1]), param[1]);
          }), match[1])) {
    return /* V_Bool */Block.__(0, [value$1]);
  } else {
    return /* V_Fail */0;
  }
}

exports.infer_types = infer_types;
/* No side effect */
